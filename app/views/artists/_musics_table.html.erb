
<%# local variables: artist %>

<table id="table_musics_by">
  <thead>
    <tr>
     <% if (can_edit=can?(:edit, Music)) %>
      <th title="DB pID" class="editor_only">pID</th>
     <% end %>
      <th title="'*' indicates the original name"><%= t("tables.title_name_ja") %></th>
      <th><%= t("tables.alt_title_name_ja") %></th>
      <th title="'*' indicates the original name"><%= t("tables.title_name_en") %></th>
      <th title="first published year"><%= t('tables.year').capitalize %></th>
     <% if can_edit %>  <%# maybe published in the future... %>
      <th class="editor_only"><%= t('Genre').capitalize %></th>
     <% end %>
      <th title="Show/Edit Engagement between Artist and Music">
      <% if (can_update_engage_how=can?(:update, EngageHow)) %>
        <%= link_to t('engage_multi_hows.table_head.how_related'), engage_hows_url %>
      <% else %>
        <%= t('engage_multi_hows.table_head.how_related') %>
      <% end %>
      </th>
     <% if can_edit %>
      <th title="Place" class="editor_only"><%= t("tables.place_country") %></th>
     <% end %>
      <th><%= t('artists.tablehead.n_harami_vids') %></th>
      <th><%= t("tables.note") %></th>
      <% if (can_update=(can? :update, Music)) %>
        <th colspan="2" title="Show/Edit Music">Music</th>
        <th title="Edit (Show) Engagements between Artist and Music" class="editor_only">Engages</th>
      <% else %>
        <th title="Show Music">Music</th>
      <% end %>
    </tr>
  </thead>

  <tbody>
    <% asterisk = (can_edit ? ('<span title="'+t('datagrid.footnote.is_original')+'">*</span>').html_safe : "") %>
    <% artist.musics.uniq.each do |music| %>
      <tr>
     <% if can_edit %>
      <td title="DB pID" class="number editor_only"><%= link_to music.id, music %></td>
     <% end %>
        <% orig_lc = music.orig_langcode %>
        <td class="title_ja"><%= music.title(langcode: 'ja', lang_fallback: false, str_fallback: '') %><%= (orig_lc == 'ja') ? asterisk : "" %></td>
        <td class="alt_title_ja"><%= music.alt_title(langcode: 'ja', lang_fallback: false, str_fallback: '') %>
            <%= print_two_with_brackets(*(%i(alt_ruby alt_romaji).map{|i| music.send(i, langcode: 'ja', lang_fallback: false)}), separator: "/") %>  <%# defined in translations_helper.rb %>
        </td>
        <td class="title_alt_en"><%= s=music.title(langcode: 'en', lang_fallback: false, str_fallback: '') %><%= asterisk if (s && (orig_lc == 'en')) %>
          <%= print_two_with_brackets(music.alt_title(langcode: 'en', lang_fallback: false)) %>  <%# defined in translations_helper.rb %>
        </td>
        <td><%= music.year %></td>
     <% if can_edit %>  <%# maybe published in the future... %>
        <td class="editor_only"><%= music.genre.title_or_alt(langcode: I18n.locale, lang_fallback_option: :either, str_fallback: "", article_to_head: true) %></td>
     <% end %>
        <% s = artist.engage_how_titles(music, year: music.year).join(', ') %>
        <% label_str = ((/\d/ =~ s) ? s : s+'('+(music.year || t('musics.show.year_unknown')).to_s+')') %>
        <% engage = artist.engages.where(music: music).first %>
          <% linktxt, engage = engage_title_link(music, artist) %> <%# defined in musics_helper.rb %>
        <td> <%= linktxt %> </td>
     <% if can_edit %>
        <td class="editor_only"><%= ar = music.place.title_or_alt_ascendants(langcode: I18n.locale, prefer_alt: true);
                sprintf '%s %s(%s)', ar[1], ((ar[1] == Prefecture::UnknownPrefecture['ja'] || ar[0].blank?) ? '' : '— '+ar[0]+' '), ar[2] %></td>
     <% end %>
        <td class="text-end"><%= music.harami_vids.count.to_s+(("ja"==I18n.locale.to_s) ? '本' : "") %></td>
        <td><%= music.note %></td>
        <td><%= link_to t("tables.Show"), music %></td>
        <% if can? :update, music %>
          <td class="editor_only"><%= link_to 'Edit', edit_music_path(music) %></td>
          <td class="text-center editor_only"><%= link_to 'Edit', edit_engage_multi_how_path(engage) %></td> <%# "engage" is set above %>
        <% end %>
      </tr>
    <% end %>
  </tbody>
</table>

