<%# local variables: model, (optional) title_kwd=(|name|title), add_tra_button %>
  <%# for example, if title_kwd=="name", t('translations.table_head.Title_name') is used %>
<% if !defined?(title_kwd)
     title_kwd = nil
   end %>  <%# This has to be in multi-line (or in the ";" syntax), as opposed to the post-placed "if", because of "defined?" %>
<%
  title_kwd =
    if title_kwd.blank?
      nil
    else
      title_kwd.to_s
    end
  prefix = "translations.table_head."
  t_title     = t([prefix+"Title",    title_kwd].compact.join("_"), default: "Title")
  t_alt_title = t([prefix+"AltTitle", title_kwd].compact.join("_"), default: "AltTitle")
%>
<% add_tra_button = defined?(add_buttons) && add_buttons if add_tra_button.nil? %>

  <section id="sec_primary_trans">
<h2><%= t("layouts.all_registered") %><%= t("layouts."+(defined?(myself) ? 'translations' : 'translated_names')) %></h2>

<table id="all_registered_translations_<%= get_modelname(model) %>" class="all_registered_translations">
  <% allcolspan = 5
     allcolspan += ((can_edit=can?(:edit, Translation)) ? 1 : 0)
     allcolspan += ((can_index=can?(:index, Translation)) ? 1 : 0) # showing SELF or not
     allcolspan += ((can_crud=can?(:crud, Translation))  ? 1 : 0)  # showing Weight column
     allcolspan += ((can_show=can?(:show, Translation))  ? 1 : 0)  # showing Note column
     action_colspan = ((can_show=can?(:show, Translation))  ? 2 : 0)  # At least, "Show"+"Edit", plus optionally demotable, promotable, destroyable

     flag_ables = {
       demotable:  (can_demote =can?(:update, Translations::DemotesController)),
       promotable: (can_promote=can?(:update, Translations::PromotesController)),
       destroyable: model.translations.any?{|tra| can? :destroy, tra},
     }
     action_colspan += flag_ables.values.count(true)

     allcolspan += action_colspan
   %>
  <thead>
    <tr>
      <th></th>
      <% if can_edit %>
        <th title="<%= t('translations.show.is_orig') %>" class="editor_only"><%= t(prefix+'Is_orig') %></th>
      <% end %>
      <th class="border-end-0"><%= t_title %></th>
      <th class="border-start-0">[<%= t(prefix+'Ruby_romaji') %>]</th>
      <th class="border-end-0"><%= t_alt_title %></th>
      <th class="border-start-0">[<%= t(prefix+'Ruby_romaji') %>]</th>
      <% if can_index %>
        <th class="editor_only">You?</th>
      <% end %>
      <% if can_show %>
        <% if can_crud %>
          <th class="moderator_only">Weight</th>
        <% end %>
        <th class="editor_only"><%= t("tables.note") %></th>
        <th colspan="<%= action_colspan %>" class="editor_only"></th> <%# action_colspan == 5 for moderators %>
      <% end %>
    </tr>
  </thead>

  <tbody>
  <% tra1 = model.translations.first %>
  <% all_lcodes = (%w(ja en fr)+model.translations.pluck(:langcode)).uniq.find_all{|i| i.present?} %>
  <% all_lcodes.each do |lcode| %>
    <% alltra = model.translations_with_lang(langcode: lcode) %>
    <% next if !%w(ja en).include?(lcode) && alltra.empty? %>

    <tr class="lang_banner_<%= lcode %>"><th colspan="<%= allcolspan %>" class="middle_row"><%= get_language_name(lcode) %> <%# defined in module_common.rb %>
      <%= sprintf("(%s)", get_language_name(lcode, in_locale: I18n.locale)) if I18n.locale.to_s != lcode %>
      <% if add_tra_button && (tra1 && tra1.creatable_other?(user: current_user, langcode: lcode) || (!tra1 && flag_ables[:destroyable])) %>
        <%= button_to t('layouts.add_translation'), new_translation_path, form_class: "inline_form button_to", method: :get, params: { a_token: nil, langcode: lcode, translatable_type: model.class.name, translatable_id: model.id } %>
      <% end %>
      </th></tr>
    <% alltra.each_with_index do |tra, i| %>
    <tr class="trans_row lc_<%= lcode %>">
      <td><%= i+1 %><%= ('<span title="'+t("datagrid.footnote.is_original")+'">*</span>').html_safe if tra.is_orig %></td>
      <% if can_edit %>
      <td class="trans_is_orig editor_only"><%= tra.is_orig_str %></td>
      <% end %>
      <td class="trans_title border-end-0"><%= tra.title %></td>
      <td class="trans_ruby_romaji ruby border-start-0"><%= print_two_with_brackets(tra.ruby, tra.romaji) %></td>  <%# defined in translations_helper.rb %>
      <% alt_tit = tra.alt_title; alt_blank = (alt_tit.blank? && can_show) %>
      <td class="trans_alt_title border-end-0<%= " text-center" if alt_blank %>"><%= alt_blank ? '&mdash;'.html_safe : alt_tit %></td>
      <td class="trans_alt_ruby_romaji ruby border-start-0"><%= print_two_with_brackets(tra.alt_ruby, tra.alt_romaji) %></td>
      <% if can_index %>
        <td class="align-c trans_you editor_only"><%= [tra.create_user_id, tra.update_user_id].include?(current_user.id) ? "Yes" : "" %></td>
      <% end %>
      <% if can_crud %>
        <td class="align-r trans_weight moderator_only"><%= tra.weight%></td>
      <% end %>
      <% if can_show %>
        <td class="editor_only"><%= auto_link50(tra.note) %></td>
      <% end %>
      <% if defined?(myself) && tra == myself %>
        <td colspan="2" class="align-c trans_action editor_only" style="<%= (flag_ables[:demotable] || flag_ables[:promotable]) ? 'border-right-style: none;' : ''  %>"><strong>SELF</strong></td>  <%# Called from Translation-Edit %>
      <% else %>
        <% if can_show %>
          <td class="trans_action trans_show editor_only" style="border-right-style: none;"><%= link_to 'Show', tra %></td>
          <% class2add = ((current_user && can?(:update, tra) && ![tra.create_user, tra.update_user].include?(current_user)) ? "moderator_only" : "editor_only") %>  <%# For one's own Translation (or not editable), it is for "editor_only", else "moderator_only" in order to prompt the user to be more careful %>
          <td class="trans_action trans_edit <%= class2add %>" style="border-left-style: none;<%= (flag_ables[:demotable] || flag_ables[:promotable]) ? 'border-right-style: none;' : ''  %>">
          <% if can? :update, tra %>
            / <%= link_to 'Edit', edit_translation_path(tra) %>
          <% end %>
          </td>
        <% end %>
      <% end %>
      <% if flag_ables[:demotable] %>
        <td class="trans_action trans_demote moderator_only" style="border-left-style: none; border-right-style: none">
          <% if Translations::DemotesController.allowed?(tra) %>
            <%  strlink = "Demote↓" %>
             / <%= link_to strlink, translations_update_demotes_path(tra) %>
          <% end %>
        </td>
      <% end %>
      <% if flag_ables[:promotable] %>
        <td class="trans_action trans_promote moderator_only" style="border-left-style: none;">
          <% if Translations::PromotesController.allowed?(tra) %>
            <%  strlink = (tra.is_orig ? '<span title="Weight should be zero because this is the original. Please promote it.">Promote↑</span>'.html_safe : "Promote↑") %>
            / <%= link_to strlink, translations_update_promotes_path(tra) %>
          <% end %>
        </td>
      <% end %>
      <% if flag_ables[:destroyable] %>
        <% if can?(:destroy, tra) %>
          <% class2add = ((current_user && current_user.qualified_as?(Role::RNAME_MODERATOR, RoleCategory::MNAME_TRANSLATION)) ? "moderator_only" : "editor_only") %> <%# One's own Translation can be destroyed by themselves even if they are Editors. It is the same for Moderators, but Moderators do have more responsibility and so the style of "moderator_only" is used for Destroy regardless of the Translation owned by themselves or not. %>
          <% class2add = "admin_only" if tra.last_remaining_in_any_languages? %>
          <td class="trans_action trans_destroy <%= class2add %>" style="border-left-style: none;">
            <%= link_to('Destroy', tra, method: :delete, data: { confirm: (t('are_you_sure')).html_safe }) %>
          </td>
        <% else %>
          <td><span class="cell_disable_link destroy">Destroy</span></td>
        <% end %>
      <% end %>
    </tr>
    <% end %>
  <% end %>
  </tbody>
</table>
<% if add_tra_button && can_edit && can?(:edit, model) %>
<div class="editor_only">
 <%= t("layouts.Other_language") %>:
   <span class="lead">
    <%= link_to t('layouts.add_translation'), new_translation_path(params: { a_token: nil, translatable_type: model.class.name, translatable_id: model.id }) %>
   </span>
</div>
<% end %>

  </section> <!-- section id="sec_primary_trans" -->

