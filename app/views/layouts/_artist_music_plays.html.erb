
<%# imported local variables: artist_music_plays, optional: distinguished_artist (treated separately if specified), no_sort: (unless specified true, sorted by ([Music, Artist] or its reverse if distinguished_artist is non-nil, PlayRole, Instrument), harami_vid (used for sorting if specified; WARNING: if harami_vid is specified, artist_music_plays is assumed to be "event_item.artist_music_plays") %>
<%# The table is sorted in order of Music and Artist and then appearance in HaramiVid if harami_vid is specified. %>
<%# If distinguished_artist is specified (needed in /artist_music_plays/edit_multis/ where an Artist is focused), the columns for the Artist has the highest priority.  In HaramiVid#show (or edit), nil or nothing should be given. %>

<%
  if !defined? no_sort
    no_sort = false
  end
%>  <%# This has to be written over multiple lines. %>
<%
  if !defined? harami_vid
    harami_vid = nil
  end
%>  <%# This has to be written over multiple lines. %>
<%
  if !defined? distinguished_artist
    distinguished_artist = nil
  elsif distinguished_artist.blank?
    distinguished_artist = nil
  end
%>  <%# This has to be written over multiple lines. %>


<% db_columns, th_labels4, td_attrs4 = get_ordered_amp_arrays(distinguished_artist) %> <%# defined in artist_music_plays_helper.rb %>

<%
   rela_base =
     if no_sort
       artist_music_plays
     else
       hvma_joined_artist_music_plays(artist_music_plays, db_columns, harami_vid: harami_vid)  # should be uniq-qued
     end
%> <%# HaramiVidMusicAssocs-joined relation; defined in artist_music_plays_helper.rb %>
<%
   relas = []
   if distinguished_artist
     relas[0] = rela_base.where(    artist_id: distinguished_artist.id)
     relas[1] = rela_base.where.not(artist_id: distinguished_artist.id)
   else
     relas[0] = rela_base
     relas[1] = ArtistMusicPlay.none
   end
%>

<table class="artist_music_plays">
  <% allcolspan = 6
     action_colspan = 0

     canedit_hvid   = can? :edit, HaramiVid
     canedit_evit   = can? :edit, EventItem
     canedit_amp    = can? :edit,    ArtistMusicPlay
     candestroy_amp = false
     candestroy_amp = can?(:destroy, ArtistMusicPlay) if canedit_amp 

     allcolspan += 1 if canedit_hvid # pID
     allcolspan += 2 if canedit_evit # cover_ratio etc

     if canedit_amp
       allcolspan += 1 
       action_colspan += 1
       if candestroy_amp
         allcolspan += 1 
         action_colspan += 1
       end
     end
     
     canshows = {}.with_indifferent_access
     [Artist, Music, PlayRole, Instrument].each do |model|
       canshows[model.name.underscore] = can?(:show, model)
     end
   %>
  <thead>
    <tr>
      <th class="th_index">#</th>  <%# index number %>
     <% if canedit_hvid %>
      <th class="editor_only" title="pID of ArtistMusicPlay">pID</th>
     <% end %>
      <th><%= th_labels4[0] %></th>
      <th><%= th_labels4[1] %></th>
      <th><%= th_labels4[2] %></th>  <%# t(:PlayRole) %>
      <th><%= th_labels4[3] %></th>  <%# t(:Instrument_pl_short) %>
     <% if canedit_evit %>
      <th class="editor_only"><%= t("attr.contribution") %></th>
      <th class="editor_only"><%= t("attr.cover_ratio") %></th>
     <% end %>
      <th><%= t("tables.note").capitalize %></th>
     <% if canedit_amp %>
      <th class="editor_only" colspan="2">Actions</th>
     <% end %>
    </tr>
  </thead>

  <tbody>
    <% title_opts = {langcode: I18n.locale, lang_fallback_option: :either, article_to_head: true} %>
    <% relas.each_with_index do |rela, i_rela| %>
      <% if distinguished_artist %>
        <tr><th colspan="<%= allcolspan %>" class="text-center">For <%= (0 == i_rela) ? "this Artist" : "the other Artists" %></th></tr>
      <% end %>
      <% rela.uniq.each_with_index do |amp, i_amp| %> <%# uniq is essential (as distinct would not work) %>
        <tr>
          <td class="td_index"><%= i_amp+1 %></td>  <%# index number %>
         <% if canedit_hvid %>
          <td class="editor_only text-end"><%= amp.id %></td>
         <% end %>
         <%  td_attrs4.each do |att| %>
           <td>
             <% model = amp.send(att) %>
             <% metho = ((:music == att) ? :title_maybe_with_artist : :title_or_alt) %>
             <% tit = model.send(metho, **title_opts) %>
             <%= canshows[att] ? link_to(tit, model) : tit %>
           </td>
         <% end %>
         <% if canedit_evit %>
          <%  [:contribution_artist, :cover_ratio].each do |att| %>
           <td class="editor_only"><%= amp.send(att) %></td>
          <% end %>
         <% end %>
          <td><%= auto_link50(amp.note) %></td>
         <% if canedit_amp %>
          <td class="editor_only">
            <% if can? :update, amp %>
              <% hsprms = %i(event_item_id music_id artist_id).map{|i| [i, amp.send(i)]}.to_h %>
              <%= link_to 'Edit', edit_artist_music_plays_edit_multi_path(amp) %> <%# edit_artist_music_plays_edit_multi_path(amp, params: ...) %>
              <%# link_to 'Edit', artist_music_plays_edit_multis_path(params: {artist_music_play: hsprms}) %> <%# edit_artist_music_plays_edit_multi_path(amp, params: ...) %>
            <% end %>
          </td>
         <% end %>
         <% if candestroy_amp %>
          <td class="editor_only">
            <% if can? :destroy, amp %>
              <%= link_to t('layouts.dissociate_this', this_model: t('adjective.this')+t('EventItem')), amp, method: :delete, data: { confirm: t('are_you_sure') }, title: t('event_items.dissociate_hint') %>
            <% end %>
          </td>
         <% end %>
        </tr>
      <% end %>
   <% end %>
  </tbody>
</table>

